import binascii

# Complete SBox for AES
SBox = [
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
]
InvSBox = [
    0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
    0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
    0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
    0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
    0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
    0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
    0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
    0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
    0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
    0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
    0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
    0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
    0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
    0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
    0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
]
# Fill in mul2 and mul3 with correct AES Galois Field multiplication results
#used when mixing columns
mul2 = [
    0x00,0x02,0x04,0x06,0x08,0x0a,0x0c,0x0e,0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,
    0x20,0x22,0x24,0x26,0x28,0x2a,0x2c,0x2e,0x30,0x32,0x34,0x36,0x38,0x3a,0x3c,0x3e,
    0x40,0x42,0x44,0x46,0x48,0x4a,0x4c,0x4e,0x50,0x52,0x54,0x56,0x58,0x5a,0x5c,0x5e,
    0x60,0x62,0x64,0x66,0x68,0x6a,0x6c,0x6e,0x70,0x72,0x74,0x76,0x78,0x7a,0x7c,0x7e,
    0x80,0x82,0x84,0x86,0x88,0x8a,0x8c,0x8e,0x90,0x92,0x94,0x96,0x98,0x9a,0x9c,0x9e,
    0xa0,0xa2,0xa4,0xa6,0xa8,0xaa,0xac,0xae,0xb0,0xb2,0xb4,0xb6,0xb8,0xba,0xbc,0xbe,
    0xc0,0xc2,0xc4,0xc6,0xc8,0xca,0xcc,0xce,0xd0,0xd2,0xd4,0xd6,0xd8,0xda,0xdc,0xde,
    0xe0,0xe2,0xe4,0xe6,0xe8,0xea,0xec,0xee,0xf0,0xf2,0xf4,0xf6,0xf8,0xfa,0xfc,0xfe,
    0x1b,0x19,0x1f,0x1d,0x13,0x11,0x17,0x15,0x0b,0x09,0x0f,0x0d,0x03,0x01,0x07,0x05,
    0x3b,0x39,0x3f,0x3d,0x33,0x31,0x37,0x35,0x2b,0x29,0x2f,0x2d,0x23,0x21,0x27,0x25,
    0x5b,0x59,0x5f,0x5d,0x53,0x51,0x57,0x55,0x4b,0x49,0x4f,0x4d,0x43,0x41,0x47,0x45,
    0x7b,0x79,0x7f,0x7d,0x73,0x71,0x77,0x75,0x6b,0x69,0x6f,0x6d,0x63,0x61,0x67,0x65,
    0x9b,0x99,0x9f,0x9d,0x93,0x91,0x97,0x95,0x8b,0x89,0x8f,0x8d,0x83,0x81,0x87,0x85,
    0xbb,0xb9,0xbf,0xbd,0xb3,0xb1,0xb7,0xb5,0xab,0xa9,0xaf,0xad,0xa3,0xa1,0xa7,0xa5,
    0xdb,0xd9,0xdf,0xdd,0xd3,0xd1,0xd7,0xd5,0xcb,0xc9,0xcf,0xcd,0xc3,0xc1,0xc7,0xc5,
    0xfb,0xf9,0xff,0xfd,0xf3,0xf1,0xf7,0xf5,0xeb,0xe9,0xef,0xed,0xe3,0xe1,0xe7,0xe5
]
# used when mixing columns
mul3 = [
    0x00,0x03,0x06,0x05,0x0c,0x0f,0x0a,0x09,0x18,0x1b,0x1e,0x1d,0x14,0x17,0x12,0x11,
    0x30,0x33,0x36,0x35,0x3c,0x3f,0x3a,0x39,0x28,0x2b,0x2e,0x2d,0x24,0x27,0x22,0x21,
    0x60,0x63,0x66,0x65,0x6c,0x6f,0x6a,0x69,0x78,0x7b,0x7e,0x7d,0x74,0x77,0x72,0x71,
    0x50,0x53,0x56,0x55,0x5c,0x5f,0x5a,0x59,0x48,0x4b,0x4e,0x4d,0x44,0x47,0x42,0x41,
    0xc0,0xc3,0xc6,0xc5,0xcc,0xcf,0xca,0xc9,0xd8,0xdb,0xde,0xdd,0xd4,0xd7,0xd2,0xd1,
    0xf0,0xf3,0xf6,0xf5,0xfc,0xff,0xfa,0xf9,0xe8,0xeb,0xee,0xed,0xe4,0xe7,0xe2,0xe1,
    0xa0,0xa3,0xa6,0xa5,0xac,0xaf,0xaa,0xa9,0xb8,0xbb,0xbe,0xbd,0xb4,0xb7,0xb2,0xb1,
    0x90,0x93,0x96,0x95,0x9c,0x9f,0x9a,0x99,0x88,0x8b,0x8e,0x8d,0x84,0x87,0x82,0x81,
    0x9b,0x98,0x9d,0x9e,0x97,0x94,0x91,0x92,0x83,0x80,0x85,0x86,0x8f,0x8c,0x89,0x8a,
    0xab,0xa8,0xad,0xae,0xa7,0xa4,0xa1,0xa2,0xb3,0xb0,0xb5,0xb6,0xbf,0xbc,0xb9,0xba,
    0xfb,0xf8,0xfd,0xfe,0xf7,0xf4,0xf1,0xf2,0xe3,0xe0,0xe5,0xe6,0xef,0xec,0xe9,0xea,
    0xcb,0xc8,0xcd,0xce,0xc7,0xc4,0xc1,0xc2,0xd3,0xd0,0xd5,0xd6,0xdf,0xdc,0xd9,0xda,
    0x5b,0x58,0x5d,0x5e,0x57,0x54,0x51,0x52,0x43,0x40,0x45,0x46,0x4f,0x4c,0x49,0x4a,
    0x6b,0x68,0x6d,0x6e,0x67,0x64,0x61,0x62,0x73,0x70,0x75,0x76,0x7f,0x7c,0x79,0x7a,
    0x3b,0x38,0x3d,0x3e,0x37,0x34,0x31,0x32,0x23,0x20,0x25,0x26,0x2f,0x2c,0x29,0x2a,
    0x0b,0x08,0x0d,0x0e,0x07,0x04,0x01,0x02,0x13,0x10,0x15,0x16,0x1f,0x1c,0x19,0x1a
]
# this assumes the bit key is 128 bits
def Encrypt(key, plain_text):

    hex_key = [ord(c) for c in key]
    hex_plain = [ord(c) for c in plain_text]

    # message broken up into rows
    row0 = [hex_plain[0], hex_plain[4], hex_plain[8], hex_plain[12]]
    row1 = [hex_plain[1], hex_plain[5], hex_plain[9], hex_plain[13]]
    row2 = [hex_plain[2], hex_plain[6], hex_plain[10], hex_plain[14]]
    row3 = [hex_plain[3], hex_plain[7], hex_plain[11], hex_plain[15]]

    # message placed into a matrix
    state = [row0, row1, row2, row3]

    # key broken up into rows
    row0 = [hex_key[0], hex_key[4], hex_key[8], hex_key[12]]
    row1 = [hex_key[1], hex_key[5], hex_key[9], hex_key[13]]
    row2 = [hex_key[2], hex_key[6], hex_key[10], hex_key[14]]
    row3 = [hex_key[3], hex_key[7], hex_key[11], hex_key[15]]

    # key placed into a matrix
    hex_key = [row0, row1, row2, row3]

    # first round
    state = AddRoundKey(state, hex_key)
    temp = toString(state)

    print(f'{temp}')
    # Main rounds there are 10 of these for a 128 bit key.
    for i in range(14):
        state = SubBytes(state)                     # substitute bytes into the matrix from the table
        state = ShiftRows(state)
        state = MixColumns(state)
        state = AddRoundKey(state, hex_key)

        temp = toString(state)
        print(f'{temp}')
    # final round
    state = SubBytes(state)
    state = ShiftRows(state)
    state = AddRoundKey(state, hex_key)

    cypher_text = toString(state)

    return cypher_text

# this is just an xor for all cells for the two matrices
def AddRoundKey(state, key):
    new_state = state                               # new matrix to return
                                                    # for each row in state
    for i in range(len(state)):
                                                    # for each cell of that row
        for n in range(len(state[i])):
            new_state[i][n] ^= key[i][n]            # xor operation


    return new_state



# replace each byte with the corresponding byte from the SBox
def SubBytes(state):
    new_state = state
    for i in range(len(new_state)):
        for n in range(len(new_state[i])):
            value = new_state[i][n]
            new_state[i][n] = SBox[value]
    return new_state
# circularly shift rows to the left. 0th - 0 shifts. 1st - 1 shift, 2nd - 2 shifts, 3rd - three shifts
def ShiftRows(state):
    new_state = []

    row0 = state[0]                     # nothing happens to this row
    row1 = state[1]                     # circular shift left by 1
    row2 = state[2]                     # circular shift left by 2
    row3 = state[3]                     # circular shift left by 3

    # row 1 shift
    t1 = row1[0]
    row1[0] = row1[1]
    row1[1] = row1[2]
    row1[2] = row1[3]
    row1[3] = t1

    # row 2 shift
    t1 = row2[0]
    t2 = row2[1]
    row2[0] = row2[2]
    row2[1] = row2[3]
    row2[2] = t1
    row2[3] = t2

    # row 3 shift
    t1 = row3[0]
    t2 = row3[1]
    t3 = row3[2]
    row3[0] = row3[3]
    row3[1] = t1
    row3[2] = t2
    row3[3] = t3

    # place rows back into matrix format
    new_state.append(row0)
    new_state.append(row1)
    new_state.append(row2)
    new_state.append(row3)

    return new_state
# mix columns by using the dot product and matrix multiplication
def MixColumns(state):


    new_state = state

    t0  = state[0][0] ^ state[1][0] ^ state [2][0] ^ state[3][0]
    t1  = state[0][0] ^ state[1][0] ^ state[2][0] ^ state[3][0]
    t2  = state[0][0] ^ state[1][0] ^ state[2][0] ^ state[3][0]
    t3  = state[0][0] ^ state[1][0] ^ state [2][0] ^ state[3][0]

    t4  = state[0][0] ^ state[1][0] ^ state[2][0] ^ state[3][0]
    t5  = state[0][0] ^ state[1][0] ^ state[2][0] ^ state[3][0]
    t6  = state[0][0] ^ state[1][0] ^ state[2][0] ^ state[3][0]
    t7  = state[0][0] ^ state[1][0] ^ state[2][0] ^ state[3][0]

    t8  = state[0][0] ^ state[1][0] ^ state[2][0] ^ state[3][0]
    t9  = state[0][0] ^ state[1][0] ^ state[2][0] ^ state[3][0]
    t10 = state[0][0] ^ state[1][0] ^ state[2][0] ^ state[3][0]
    t11 = state[0][0] ^ state[1][0] ^ state[2][0] ^ state[3][0]

    t12 = state[0][0] ^ state[1][0] ^ state[2][0] ^ state[3][0]
    t13 = state[0][0] ^ state[1][0] ^ state[2][0] ^ state[3][0]
    t14 = state[0][0] ^ state[1][0] ^ state[2][0] ^ state[3][0]
    t15 = state[0][0] ^ state[1][0] ^ state[2][0] ^ state[3][0]

    t0 =  mul2[state[0][0]] ^ mul3[state[1][0]] ^ state[2][0] ^ state[3][0]
    t1 =  state[0][0] ^ mul2[state[1][0]] ^ mul3[state[2][0]] ^ state[3][0]
    t2 =  state[0][0] ^ state[1][0] ^ mul2[state[2][0]] ^ mul3[state[3][0]]
    t3 =  mul3[state[0][0]] ^ state[1][0] ^ state[2][0] ^ mul2[state[3][0]]

    t4 =  mul2[state[0][1]] ^ mul3[state[1][1]] ^ state[2][1] ^ state[3][1]
    t5 =  state[0][1] ^ mul2[state[1][1]] ^ mul3[state[2][1]] ^ state[3][1]
    t6 =  state[0][1] ^ state[1][1] ^ mul2[state[2][1]] ^ mul3[state[3][1]]
    t7 =  mul3[state[0][1]] ^ state[1][1] ^ state[2][1] ^ mul2[state[3][1]]

    t8 =  mul2[state[0][2]] ^ mul3[state[1][2]] ^ state[2][2] ^ state[3][2]
    t9 =  state[0][2] ^ mul2[state[1][2]] ^ mul3[state[2][2]] ^ state[3][2]
    t10 = state[0][2] ^ state[1][2] ^ mul2[state[2][2]] ^ mul3[state[3][2]]
    t11 = mul3[state[0][2]] ^ state[1][2] ^ state[2][2] ^ mul2[state[3][2]]

    t12 = mul2[state[0][3]] ^ mul3[state[1][3]] ^ state[2][3] ^ state[3][3]
    t13 = state[0][3] ^ mul2[state[1][3]] ^ mul3[state[2][3]] ^ state[3][3]
    t14 = state[0][3] ^ state[1][3] ^ mul2[state[2][3]] ^ mul3[state[3][3]]
    t15 = mul3[state[0][3]] ^ state[1][3] ^ state[2][3] ^ mul2[state[3][3]]

    new_state[0] = [t0,t4,t8,t12]
    new_state[1] = [t1, t5, t9, t13]
    new_state[2] = [t2, t6, t10, t14]
    new_state[3] = [t3, t7, t11, t15]

    return new_state
# takes the matrix and returns it as a string
def toString(state):
    row0 = [state[0][0], state[1][0], state[2][0], state[3][0]]
    row1 = [state[0][1], state[1][1], state[2][1], state[3][1]]
    row2 = [state[0][2], state[1][2], state[2][2], state[3][2]]
    row3 = [state[0][3], state[1][3], state[2][3], state[3][3]]
    row0 = [hex(c)[2:].zfill(2) for c in row0]
    row1 = [hex(c)[2:].zfill(2) for c in row1]
    row2 = [hex(c)[2:].zfill(2) for c in row2]
    row3 = [hex(c)[2:].zfill(2) for c in row3]
    row2.extend(row3)
    row1.extend(row2)
    row0.extend(row1)
    return ''.join(row0)

def InvSubBytes(state):
    new_state = [[InvSBox[byte] for byte in word] for word in state]
    return new_state

def InvShiftRows(state):
    new_state = [list(word) for word in state]  # Make a copy of the state matrix
    for i in range(1, 4):
        new_state[i] = new_state[i][-i:] + new_state[i][:-i]
    return new_state
# Helper function for Galois multiplication
def gmul(a, b):
    p = 0
    for c in range(8):
        if b & 1:
            p ^= a
        hi_bit_set = a & 0x80
        a <<= 1
        if hi_bit_set:
            a ^= 0x1b # x^8 = x^4 + x^3 + x + 1
        b >>= 1
    return p & 0xFF

# Inverse MixColumns function
def InvMixColumns(state):
    new_state = [[0 for _ in range(4)] for _ in range(4)]

    for i in range(4):
        new_state[i][0] = (gmul(0x0e, state[i][0]) ^
                           gmul(0x0b, state[i][1]) ^
                           gmul(0x0d, state[i][2]) ^
                           gmul(0x09, state[i][3]))
        new_state[i][1] = (gmul(0x09, state[i][0]) ^
                           gmul(0x0e, state[i][1]) ^
                           gmul(0x0b, state[i][2]) ^
                           gmul(0x0d, state[i][3]))
        new_state[i][2] = (gmul(0x0d, state[i][0]) ^
                           gmul(0x09, state[i][1]) ^
                           gmul(0x0e, state[i][2]) ^
                           gmul(0x0b, state[i][3]))
        new_state[i][3] = (gmul(0x0b, state[i][0]) ^
                           gmul(0x0d, state[i][1]) ^
                           gmul(0x09, state[i][2]) ^
                           gmul(0x0e, state[i][3]))

    return new_state
def AddRoundKey(state, key):
    new_state = [[None for _ in range(4)] for _ in range(4)]
    for i in range(4):
        for j in range(4):
            new_state[i][j] = state[i][j] ^ key[i][j]
    return new_state

def Decrypt(cipher_text, key):
    # Assuming cipher_text and key are 16-byte hexadecimal strings
    cipher_text_bytes = [int(cipher_text[i:i+2], 16) for i in range(0, len(cipher_text), 2)]
    key_bytes = [int(key[i:i+2], 16) for i in range(0, len(key), 2)]

    # Reconstruct state and key matrices
    state = [cipher_text_bytes[i:i+4] for i in range(0, len(cipher_text_bytes), 4)]
    key_schedule = [key_bytes[i:i+4] for i in range(0, len(key_bytes), 4)]

    # Initial AddRoundKey step (assuming this is after the last round key for now)
    state = AddRoundKey(state, key_schedule)

    # Main rounds (10 for AES-128, but you have 14 rounds in your encryption function)
    for round_num in range(10):
        state = InvShiftRows(state)
        state = InvSubBytes(state)
        state = AddRoundKey(state, key_schedule)
        state = InvMixColumns(state)

    # Final round (without MixColumns)
    state = InvShiftRows(state)
    state = InvSubBytes(state)
    state = AddRoundKey(state, key_schedule)

    # Convert state matrix back into a single string
    decrypted_bytes = [byte for word in state for byte in word]
    decrypted_text = ''.join(chr(byte) for byte in decrypted_bytes)
    return decrypted_text



def user_interact():
    action = input("Do you want to encrypt or decrypt? Enter 'encrypt' or 'decrypt': ")
    key = input("Enter a 32-character hexadecimal key (16 bytes): ")
    if len(key) != 32:
        print("Invalid key length. The key must be exactly 32 hexadecimal characters (16 bytes).")
        return

    if action.lower() == 'encrypt':
        plain_text = input("Enter the plaintext in hexadecimal (16 bytes): ")
        if len(plain_text) != 32:
            print("Invalid plaintext length. The plaintext must be exactly 32 hexadecimal characters (16 bytes).")
            return
        encrypted = Encrypt(key, plain_text)
        print("Ciphertext:", encrypted)
    elif action.lower() == 'decrypt':
        encrypted_text = input("Enter the encrypted text in hexadecimal (16 bytes): ")
        if len(encrypted_text) != 32:
            print("Invalid encrypted text length. The encrypted text must be exactly 32 hexadecimal characters (16 bytes).")
            return
        decrypted = Decrypt(key, encrypted_text)
        print("Decrypted text:", decrypted)
    else:
        print("Invalid input, please enter 'encrypt' or 'decrypt'.")

if __name__ == '__main__':
    user_interact()
